import { dirname, isAbsolute, resolve } from 'path'

const defaultOptions = {
  name: '[name].[ext]?[sha512:hash:base64:7]'
}

export default function transformAssets({ types: t }) {
  function resolveModulePath(filename) {
    const dir = dirname(filename)
    if (isAbsolute(dir)) return dir
    if (process.env.PWD) return resolve(process.env.PWD, dir)
    return resolve(dir)
  }

  return {
    visitor: {
      ImportDeclaration(path, { file, opts }) {


        // const { specifiers, source } = path.node

        // console.log('>>>>>>>>>import<<<<<<<<<<', source, t.isImportDefaultSpecifier(specifiers[0]));

return;


        const currentConfig = { ...defaultOptions, ...opts }

        if (typeof currentConfig.name !== 'string') {
          return
        }

        currentConfig.extensions = currentConfig.extensions || []

        require('asset-require-hook')(currentConfig)

        // const { callee: { name: calleeName }, arguments: args } = path.node
        const { specifiers, source } = path.node

        // console.log('>>>>>>>>>import<<<<<<<<<<', source.value, t.isImportDefaultSpecifier(specifiers[0]));


        if (!source || !t.isStringLiteral(source)) {
          return
        }

        if (currentConfig.extensions.find(ext => source.value.endsWith(ext))) {


          const { value: filePath } = source

          if (!t.isImportDefaultSpecifier(specifiers[0])) {
            throw new Error(`Found empty import from ${filePath}.`)
          }


          const from = resolveModulePath(file.opts.filename)
          const p = require(resolve(from, filePath))

          // console.log(path);

          // path.replaceWith(t.StringLiteral(p))
        }












      },
      CallExpression(path, { file, opts }) {
        const currentConfig = { ...defaultOptions, ...opts }

        if (typeof currentConfig.name !== 'string') {
          return
        }

        currentConfig.extensions = currentConfig.extensions || []

        require('asset-require-hook')(currentConfig)

        const { callee: { name: calleeName }, arguments: args } = path.node

        // console.log('>>>>>>>>>require<<<<<<<<<<', calleeName);

        if (calleeName !== 'require' || !args.length || !t.isStringLiteral(args[0])) {
          return
        }

        if (currentConfig.extensions.find(ext => args[0].value.endsWith(ext))) {
          const [ { value: filePath } ] = args

          if (!t.isVariableDeclarator(path.parent)) {
            throw new Error(`Found empty import from ${filePath}.`)
          }

          const from = resolveModulePath(file.opts.filename)
          const p = require(resolve(from, filePath))

          path.replaceWith(t.StringLiteral(p))
        }
      }
    }
  }
}
