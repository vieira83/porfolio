'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = transformAssets;

var _path = require('path');

var defaultOptions = {
  name: '[name].[ext]?[sha512:hash:base64:7]'
};

function transformAssets(_ref) {
  var t = _ref.types;

  function resolveModulePath(filename) {
    var dir = (0, _path.dirname)(filename);
    if ((0, _path.isAbsolute)(dir)) return dir;
    if (process.env.PWD) return (0, _path.resolve)(process.env.PWD, dir);
    return (0, _path.resolve)(dir);
  }

  return {
    visitor: {
      CallExpression: function CallExpression(path, _ref2) {
        var file = _ref2.file;
        var opts = _ref2.opts;

        var currentConfig = _extends({}, defaultOptions, opts);

        if (typeof currentConfig.name !== 'string') {
          return;
        }

        currentConfig.extensions = currentConfig.extensions || [];

        require('asset-require-hook')(currentConfig);

        var _path$node = path.node;
        var calleeName = _path$node.callee.name;
        var args = _path$node.arguments;


        if (calleeName !== 'require' || !args.length || !t.isStringLiteral(args[0])) {
          return;
        }

        if (currentConfig.extensions.find(function (ext) {
          return args[0].value.endsWith(ext);
        })) {
          var _args = _slicedToArray(args, 1);

          var filePath = _args[0].value;


          if (!t.isVariableDeclarator(path.parent)) {
            throw new Error('Found empty import from ' + filePath + '.');
          }

          var from = resolveModulePath(file.opts.filename);
          var p = require((0, _path.resolve)(from, filePath));

          path.replaceWith(t.StringLiteral(p));
        }
      }
    }
  };
}